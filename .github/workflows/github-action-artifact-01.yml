# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Artifact workflow-01

on: [workflow_dispatch]

jobs:
  ci:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar

      - name: Check jar file
        run: ls ./target

      - uses: actions/upload-artifact@v4
        with:
          name: app.jar
          path: ./target/*.jar

  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app.jar
          path: ./

      # source 파일을 EC2의 target으로 복사
      - name: From Github Actions to AWS EC2 through SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: ./app.jar
          target: /home/ubuntu/app

      # 8080점유 프로세스 종료시키고 jar 실행
      - name: Connecting EC2 through SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            rm -rf /home/ubuntu/app/deploy
            mkdir /home/ubuntu/app/deploy
            mv /home/ubuntu/app/app.jar /home/ubuntu/app/deploy/app.jar
            cd /home/ubuntu/app/deploy
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar app.jar > ./output.log 2>&1 &
#            rm -rf /home/ubuntu/app