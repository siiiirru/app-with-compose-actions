name: Build and Push Docker Image To AWS ECR
on:
  push:
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Make application-prod.properties
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Naming jar file
        run: mv ./target/*.jar ./target/app.jar

      - name: Check jar file
        run: ls ./target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR (Private)
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Generate image tag with timestamp
        run: echo "IMAGE_TAG=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.AWS_ECR_PRIVATE_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.AWS_ECR_PRIVATE_REPOSITORY }}:${{ env.IMAGE_TAG }}
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Execute deployment script
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            RUNNING_CONTAINERS=$(sudo docker ps -q)
            if [ -n "$RUNNING_CONTAINERS" ]; then
              echo "Stopping running containers..."
              sudo docker stop $RUNNING_CONTAINERS
              sudo docker rm $RUNNING_CONTAINERS
            fi
            sudo docker image prune -a -f
            IMAGE=${{ secrets.AWS_ECR_PRIVATE_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ secrets.AWS_ECR_PRIVATE_REPOSITORY }}:${{ env.IMAGE_TAG }}
            docker pull $IMAGE
            sudo docker run -d -p 8080:8080 \
            -e TZ=Asia/Seoul \
            $IMAGE